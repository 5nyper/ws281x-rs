/* automatically generated by rust-bindgen */
#![allow(non_camel_case_types, dead_code)]
extern crate libc;

pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub const DOT_COLORS: [u32;8] = [0x200000,   // red
				    0x201000,   // orange
				    0x202000,   // yellow
				    0x002000,   // green
				    0x002020,   // lightblue
				    0x000020,   // blue
				    0x100010,   // purple
				    0x200010 ];  // pink
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub _type: uint32_t,
    pub hwver: uint32_t,
    pub periph_base: uint32_t,
    pub videocore_base: uint32_t,
    pub desc: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rpi_hw_t = Struct_Unnamed1;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub ctl: uint32_t,
    pub sta: uint32_t,
    pub dmac: uint32_t,
    pub resvd_0x0c: uint32_t,
    pub rng1: uint32_t,
    pub dat1: uint32_t,
    pub fif1: uint32_t,
    pub resvd_0x1c: uint32_t,
    pub rng2: uint32_t,
    pub dat2: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pwm_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub pinnum: ::libc::c_int,
    pub altnum: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pwm_pin_table_t = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub count: ::libc::c_int,
    pub pins: *const pwm_pin_table_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pwm_pin_tables_t = Struct_Unnamed4;
pub enum Struct_ws2811_device { }
pub type ws2811_led_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub gpionum: ::libc::c_int,
    pub invert: ::libc::c_int,
    pub count: ::libc::c_int,
    pub brightness: ::libc::c_int,
    pub strip_type: ::libc::c_int,
    pub leds: *mut ws2811_led_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ws2811_channel_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub device: *mut Struct_ws2811_device,
    pub rpi_hw: *const rpi_hw_t,
    pub freq: uint32_t,
    pub dmanum: ::libc::c_int,
    pub channel: [ws2811_channel_t; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ws2811_t = Struct_Unnamed6;
extern "C" {
    pub fn mbox_open() -> ::libc::c_int;
    pub fn mbox_close(file_desc: ::libc::c_int);
    pub fn get_version(file_desc: ::libc::c_int) -> ::libc::c_uint;
    pub fn mem_alloc(file_desc: ::libc::c_int, size: ::libc::c_uint,
                     align: ::libc::c_uint, flags: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn mem_free(file_desc: ::libc::c_int, handle: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn mem_lock(file_desc: ::libc::c_int, handle: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn mem_unlock(file_desc: ::libc::c_int, handle: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn mapmem(base: ::libc::c_uint, size: ::libc::c_uint)
     -> *mut ::libc::c_void;
    pub fn unmapmem(addr: *mut ::libc::c_void, size: ::libc::c_uint)
     -> *mut ::libc::c_void;
    pub fn execute_code(file_desc: ::libc::c_int, code: ::libc::c_uint,
                        r0: ::libc::c_uint, r1: ::libc::c_uint,
                        r2: ::libc::c_uint, r3: ::libc::c_uint,
                        r4: ::libc::c_uint, r5: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn execute_qpu(file_desc: ::libc::c_int, num_qpus: ::libc::c_uint,
                       control: ::libc::c_uint, noflush: ::libc::c_uint,
                       timeout: ::libc::c_uint) -> ::libc::c_uint;
    pub fn qpu_enable(file_desc: ::libc::c_int, enable: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn rpi_hw_detect() -> *const rpi_hw_t;
    pub fn pwm_pin_alt(chan: ::libc::c_int, pinnum: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ws2811_init(ws2811: *mut ws2811_t) -> ::libc::c_int;
    pub fn ws2811_fini(ws2811: *mut ws2811_t);
    pub fn ws2811_render(ws2811: *mut ws2811_t) -> ::libc::c_int;
    pub fn ws2811_wait(ws2811: *mut ws2811_t) -> ::libc::c_int;
}
pub unsafe fn set_led(foo: &mut ws2811_t, index: isize, value: u32) {
    *foo.channel[0].leds.offset(index) = value
}
